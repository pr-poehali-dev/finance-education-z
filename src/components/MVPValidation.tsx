import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";
import { useState } from "react";

const MVPValidation = () => {
  const [feedbackSent, setFeedbackSent] = useState(false);
  const [testingStep, setTestingStep] = useState(0);

  const validationMethods = [
    {
      title: "üó£Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å",
      description: "5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å –¥–µ–Ω—å–≥–∞–º–∏",
      duration: "2 –º–∏–Ω",
      reward: "+50 –±–∞–ª–ª–æ–≤",
      color: "from-electric-purple to-electric-blue",
      action: "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
    },
    {
      title: "üéÆ –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ —Ñ—É–Ω–∫—Ü–∏–π",
      description: "–ü–æ–ø—Ä–æ–±—É–π –≤—Å–µ —Ñ–∏—à–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –¥–µ–ª–µ",
      duration: "5 –º–∏–Ω",
      reward: "+100 –±–∞–ª–ª–æ–≤",
      color: "from-electric-green to-neon-green",
      action: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
    },
    {
      title: "üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞",
      description: "–ü–æ–∑–æ–≤–∏ –¥—Ä—É–≥–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ",
      duration: "1 –º–∏–Ω",
      reward: "+200 –±–∞–ª–ª–æ–≤",
      color: "from-electric-orange to-electric-pink",
      action: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
    },
  ];

  const testingScenarios = [
    "üì± –ü—Ä–µ–¥—Å—Ç–∞–≤—å: —É —Ç–µ–±—è –µ—Å—Ç—å 5000‚ÇΩ –∫–∞—Ä–º–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤ –º–µ—Å—è—Ü",
    "üõçÔ∏è –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª 1500‚ÇΩ –Ω–∞ –æ–¥–µ–∂–¥—É –∑–∞ –Ω–µ–¥–µ–ª—é",
    "üéØ –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ AirPods –∑–∞ 3 –º–µ—Å—è—Ü–∞",
    "üìä –ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏",
  ];

  const handleFeedback = () => {
    setFeedbackSent(true);
    setTimeout(() => setFeedbackSent(false), 3000);
  };

  return (
    <section className="py-16 px-4 bg-gradient-to-br from-indigo-50 to-purple-50">
      <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h2 className="text-4xl md:text-5xl font-montserrat font-bold mb-4">
            <span className="gradient-text">–ü–æ–º–æ–≥–∏ —Å–¥–µ–ª–∞—Ç—å MVP –∫—Ä—É—á–µ! üöÄ</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –≠—Ç–æ —Ä–∞–Ω–Ω—è—è –≤–µ—Ä—Å–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤. –¢–≤–æ—ë –º–Ω–µ–Ω–∏–µ
            –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è Gen Z
          </p>
        </div>

        {/* –ú–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
          {validationMethods.map((method, index) => (
            <div
              key={index}
              className="glass-effect rounded-2xl p-6 hover-lift transition-all duration-300"
            >
              <div className="text-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-2">
                  {method.title}
                </h3>
                <p className="text-sm text-gray-600 mb-4">
                  {method.description}
                </p>
              </div>

              <div className="flex justify-between items-center mb-4 text-sm text-gray-500">
                <span>‚è±Ô∏è {method.duration}</span>
                <span className="font-semibold text-electric-green">
                  {method.reward}
                </span>
              </div>

              <Button
                className={`w-full bg-gradient-to-r ${method.color} text-white font-semibold rounded-xl hover:shadow-lg transition-all duration-300`}
                onClick={index === 1 ? () => setTestingStep(1) : handleFeedback}
              >
                {method.action}
                <Icon name="ArrowRight" size={16} className="ml-2" />
              </Button>
            </div>
          ))}
        </div>

        {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç-—Å—Ü–µ–Ω–∞—Ä–∏–π */}
        {testingStep > 0 && (
          <div className="glass-effect rounded-2xl p-8 mb-12 animate-fade-in">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold text-gray-800 mb-2">
                üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç-—Å—Ü–µ–Ω–∞—Ä–∏–π
              </h3>
              <Progress
                value={(testingStep / testingScenarios.length) * 100}
                className="h-2 max-w-md mx-auto"
              />
            </div>

            <div className="max-w-2xl mx-auto">
              <div className="bg-white rounded-xl p-6 mb-6">
                <div className="text-lg font-medium text-gray-800 mb-4">
                  –®–∞–≥ {testingStep} –∏–∑ {testingScenarios.length}
                </div>
                <div className="text-xl text-gray-700 mb-6">
                  {testingScenarios[testingStep - 1]}
                </div>

                {testingStep === 4 ? (
                  <div className="space-y-4">
                    <div className="bg-gradient-to-r from-electric-green/10 to-neon-green/10 rounded-xl p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <Icon
                          name="Target"
                          size={20}
                          className="text-electric-green"
                        />
                        <span className="font-semibold text-electric-green">
                          –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                        </span>
                      </div>
                      <p className="text-gray-700">
                        –ï—Å–ª–∏ –±—É–¥–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ 1,500‚ÇΩ –≤ –º–µ—Å—è—Ü –∏ —Å–æ–∫—Ä–∞—Ç–∏—à—å
                        —Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ—Ñ–µ –Ω–∞ 500‚ÇΩ, –∫—É–ø–∏—à—å AirPods —É–∂–µ —á–µ—Ä–µ–∑ 2,5
                        –º–µ—Å—è—Ü–∞! üéß‚ú®
                      </p>
                    </div>
                  </div>
                ) : null}
              </div>

              <div className="flex justify-center space-x-4">
                {testingStep > 1 && (
                  <Button
                    variant="outline"
                    onClick={() => setTestingStep(testingStep - 1)}
                  >
                    –ù–∞–∑–∞–¥
                  </Button>
                )}

                <Button
                  className="bg-gradient-to-r from-electric-purple to-electric-blue text-white"
                  onClick={() => {
                    if (testingStep < testingScenarios.length) {
                      setTestingStep(testingStep + 1);
                    } else {
                      setTestingStep(0);
                      handleFeedback();
                    }
                  }}
                >
                  {testingStep < testingScenarios.length
                    ? "–î–∞–ª–µ–µ"
                    : "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"}
                  <Icon name="ArrowRight" size={16} className="ml-2" />
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å */}
        <div className="glass-effect rounded-2xl p-8">
          <div className="text-center mb-8">
            <h3 className="text-2xl font-bold text-gray-800 mb-2">
              –û—Ü–µ–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ç –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º
            </h3>
            <p className="text-gray-600">–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ü–µ–ø–∏–ª–æ?</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            {[
              { emoji: "üéÆ", text: "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è", votes: 127 },
              { emoji: "ü§ñ", text: "–ò–ò-—Å–æ–≤–µ—Ç—ã", votes: 89 },
              { emoji: "üìä", text: "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", votes: 156 },
              { emoji: "üèÜ", text: "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", votes: 94 },
            ].map((option, index) => (
              <Button
                key={index}
                variant="outline"
                className="h-20 flex-col space-y-2 hover-scale transition-all duration-300"
                onClick={handleFeedback}
              >
                <span className="text-2xl">{option.emoji}</span>
                <span className="text-sm font-medium">{option.text}</span>
                <span className="text-xs text-gray-500">
                  {option.votes} –≥–æ–ª–æ—Å–æ–≤
                </span>
              </Button>
            ))}
          </div>

          {feedbackSent && (
            <div className="text-center animate-fade-in">
              <div className="inline-flex items-center space-x-2 bg-electric-green/10 text-electric-green px-4 py-2 rounded-full">
                <Icon name="CheckCircle" size={16} />
                <span className="font-medium">
                  –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫! +25 –±–∞–ª–ª–æ–≤ üéâ
                </span>
              </div>
            </div>
          )}
        </div>

        {/* Roadmap –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ */}
        <div className="mt-12 text-center">
          <div className="inline-flex items-center space-x-2 bg-white rounded-full px-6 py-3 shadow-lg mb-4">
            <Icon name="Rocket" size={16} className="text-electric-purple" />
            <span className="text-sm font-medium text-gray-700">
              –°–ª–µ–¥—É—é—â–∏–π —Ä–µ–ª–∏–∑ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!
            </span>
          </div>

          <Button
            size="lg"
            className="bg-gradient-to-r from-electric-purple via-electric-blue to-electric-green text-white font-semibold px-8 py-4 rounded-full text-lg hover-lift"
          >
            <Icon name="Bell" size={20} className="mr-2" />
            –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–ª–∏–∑–µ
          </Button>
        </div>
      </div>
    </section>
  );
};

export default MVPValidation;
